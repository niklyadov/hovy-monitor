<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSDeskBand</name>
    </assembly>
    <members>
        <member name="T:CSDeskBand.VisibilityChangedEventArgs">
            <summary>
            Provides data for a visibility changed event.
            </summary>
        </member>
        <member name="P:CSDeskBand.VisibilityChangedEventArgs.IsVisible">
            <summary>
            Status of visibility.
            </summary>
        </member>
        <member name="T:CSDeskBand.TaskbarOrientationChangedEventArgs">
            <summary>
            Provides data for a taskbar orientation change event.
            </summary>
        </member>
        <member name="P:CSDeskBand.TaskbarOrientationChangedEventArgs.Orientation">
            <summary>
            Orientation of the taskbar.
            </summary>
        </member>
        <member name="T:CSDeskBand.TaskbarSizeChangedEventArgs">
            <summary>
            Provides data for a taskbar size change event.
            </summary>
        </member>
        <member name="P:CSDeskBand.TaskbarSizeChangedEventArgs.Size">
            <summary>
            Size of the taskbar.
            </summary>
        </member>
        <member name="T:CSDeskBand.TaskbarEdgeChangedEventArgs">
            <summary>
            Provides data for a taskbar edge change event.
            </summary>
        </member>
        <member name="P:CSDeskBand.TaskbarEdgeChangedEventArgs.Edge">
            <summary>
            Edge location of the taskbar.
            </summary>
        </member>
        <member name="T:CSDeskBand.CSDeskBandImpl">
            <summary>
            Default implementation for icsdeskband
            </summary>
        </member>
        <member name="T:CSDeskBand.ContextMenu.DeskBandMenu">
            <summary>
            A sub menu item that can contain other <see cref="T:CSDeskBand.ContextMenu.DeskBandMenuItem"/>.
            </summary>
        </member>
        <member name="P:CSDeskBand.ContextMenu.DeskBandMenu.Items">
            <summary>
            List of <see cref="T:CSDeskBand.ContextMenu.DeskBandMenuItem"/> that this contains.
            </summary>
        </member>
        <member name="P:CSDeskBand.ContextMenu.DeskBandMenu.Enabled">
            <summary>
            Determines if the menu item is enabled.
            </summary>
            <value>
            True if the menu item can be interacted with. False to disable interactions.
            The default value is true;
            </value>
        </member>
        <member name="P:CSDeskBand.ContextMenu.DeskBandMenu.Text">
            <summary>
            The text shown in the menu item.
            </summary>
            <value>
            The text that will be displayed for this menu item.
            </value>
        </member>
        <member name="M:CSDeskBand.ContextMenu.DeskBandMenu.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:CSDeskBand.ContextMenu.DeskBandMenu"/> with a display text.
            </summary>
            <param name="text">The text displayed for this item in a menu.</param>
        </member>
        <member name="M:CSDeskBand.ContextMenu.DeskBandMenu.#ctor(System.String,System.Collections.Generic.IEnumerable{CSDeskBand.ContextMenu.DeskBandMenuItem})">
            <summary>
            Initializes a new instance of <see cref="T:CSDeskBand.ContextMenu.DeskBandMenu"/> with a display text and a list of submenu items.
            </summary>
            <param name="text">The text displayed for this item in a menu.</param>
            <param name="items">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:CSDeskBand.ContextMenu.DeskBandMenuItem"/> that will appear in this submenu.</param>
        </member>
        <member name="M:CSDeskBand.ContextMenu.DeskBandMenu.Finalize">
            <summary>
            Frees up resoruces associated with the menu
            </summary>
        </member>
        <member name="T:CSDeskBand.ContextMenu.DeskBandMenuAction">
            <summary>
            A context menu item that can be clicked.
            </summary>
        </member>
        <member name="P:CSDeskBand.ContextMenu.DeskBandMenuAction.Checked">
            <summary>
            Determines if there is a checkmark next to the menu item.
            </summary>
            <value>
            True if the menu should have a checkmark. False if there should be no checkmark.
            The default value is false.
            </value>
        </member>
        <member name="P:CSDeskBand.ContextMenu.DeskBandMenuAction.Enabled">
            <summary>
            Determines if the menu item is enabled.
            </summary>
            <value>
            True if the menu item can be interacted with. False to disable interactions.
            The default value is true;
            </value>
        </member>
        <member name="P:CSDeskBand.ContextMenu.DeskBandMenuAction.Text">
            <summary>
            The text shown in the menu item.
            </summary>
            <value>
            The text that will be displayed for this menu item.
            </value>
        </member>
        <member name="E:CSDeskBand.ContextMenu.DeskBandMenuAction.Clicked">
            <summary>
            Occurs when the menu item has been clicked.
            </summary>
        </member>
        <member name="M:CSDeskBand.ContextMenu.DeskBandMenuAction.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CSDeskBand.ContextMenu.DeskBandMenuAction"/> with its display text.
            </summary>
            <param name="text">The text that is shown for this item in a menu.</param>
        </member>
        <member name="T:CSDeskBand.ContextMenu.DeskBandMenuItem">
            <summary>
            Base class for deskband menu items.
            </summary>
        </member>
        <member name="M:CSDeskBand.ContextMenu.DeskBandMenuItem.AddToMenu(System.IntPtr,System.UInt32,System.UInt32@,System.Collections.Generic.Dictionary{System.UInt32,CSDeskBand.ContextMenu.DeskBandMenuAction})">
            <summary>
            Add items to the menu
            </summary>
            <param name="menu">The menu to add items to</param>
            <param name="itemPosition">The position of the item to insert into the menu. Id should be incremented if item is inserted</param>
            <param name="itemId">Unique id of the menu item</param>
            <param name="callbacks">Dictionary of callbacks assigned to a <paramref name="itemId"/></param>
        </member>
        <member name="T:CSDeskBand.ContextMenu.DeskBandMenuSeparator">
            <summary>
            A context menu seperator.
            </summary>
        </member>
        <member name="T:CSDeskBand.CSDeskBandRegistrationAttribute">
            <summary>
            Attributes that are used to define some properties of the deskband
            </summary>
        </member>
        <member name="P:CSDeskBand.CSDeskBandRegistrationAttribute.Name">
            <summary>
            Name of the deskband in the toolbar menu.
            </summary>
            <value>
            The name is used to select the deskband from the toolbars menu.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandRegistrationAttribute.ShowDeskBand">
            <summary>
            Request ShowDeskBand after succesfully registered deskband
            </summary>
        </member>
        <member name="T:CSDeskBand.CSDeskBandOptions">
            <summary>
            Options to configure the deskband
            </summary>
        </member>
        <member name="F:CSDeskBand.CSDeskBandOptions.TaskbarHorizontalHeightLarge">
            <summary>
            Height for a default horizontal taskbar
            </summary>
        </member>
        <member name="F:CSDeskBand.CSDeskBandOptions.TaskbarHorizontalHeightSmall">
            <summary>
            Height for a default horizontal taskbar with small icons
            </summary>
        </member>
        <member name="F:CSDeskBand.CSDeskBandOptions.TaskbarVerticalWidth">
            <summary>
            Width for a default vertical taskbar. There is no small vertical taskbar
            </summary>
        </member>
        <member name="F:CSDeskBand.CSDeskBandOptions.NoLimit">
            <summary>
            Value that represents no limit for deskband size
            </summary>
            <seealso cref="P:CSDeskBand.CSDeskBandOptions.MaxHorizontalHeight"/>
            <seealso cref="P:CSDeskBand.CSDeskBandOptions.MaxVerticalWidth"/>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.HeightCanChange">
            <summary>
            Determines if the height of the horizontal deskband is allowed to change. For a deskband in the vertical orientation, it will be the width.
            Works alongside with the property <see cref="P:CSDeskBand.CSDeskBandOptions.HeightIncrement"/>.
            </summary>
            <value>
            True if the height / width of the deskband can be changed. False to prevent changes.
            The default value is true.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.HeightIncrement">
            <summary>
            Height step size of a horizontal deskband when it is being resized. For a deskband in the vertical orientation, it will be the step size of the width.
            The deskband will only be resized to multiples of this value.
            </summary>
            <example>
            If increment is 50, then the height of the deskband can only be resized to 50, 100 ...
            </example>
            <value>
            The step size for resizing. This value is only used if <see cref="P:CSDeskBand.CSDeskBandOptions.HeightCanChange"/> is true. If the value is less than 0, the height / width can be any size.
            The default value is 1.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.IsFixed">
            <summary>
            Determines if the deskband has a fixed position and size, and if the gripper is shown.
            </summary>
            <value>
            True if the deskband is fixed. False if the deskband can be adjusted.
            The default value is false.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.ShowTitle">
            <summary>
            Determines whether <see cref="P:CSDeskBand.CSDeskBandOptions.Title"/> is shown next to the deskband
            </summary>
            <value>
            True if the title should be shown. False if the title is hidden.
            The default value is false.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.Title">
            <summary>
            The title of the deskband. This will be shown if <see cref="P:CSDeskBand.CSDeskBandOptions.ShowTitle"/> is true
            </summary>
            <value>
            The title to display. If the title is null, it will be converted to an empty string.
            The default value is an empty string.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.MinVerticalSize">
            <summary>
            Minimum <see cref="T:CSDeskBand.Size"/> of the deskband in the vertical orientation.
            </summary>
            <seealso cref="T:CSDeskBand.TaskbarOrientation"/>
            <value>
            The default value is <see cref="F:CSDeskBand.CSDeskBandOptions.NoLimit"/> for the width and height.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.MaxVerticalWidth">
            <summary>
            Maximum width of the deskband in the vertical orientation
            </summary>
            <remarks>
            The maximum height will have to be addressed in your code as there is no limit to the height of the deskband when vertical.
            </remarks>
            <seealso cref="T:CSDeskBand.TaskbarOrientation"/>
            <value>
            The default value is <see cref="F:CSDeskBand.CSDeskBandOptions.NoLimit"/>.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.VerticalSize">
            <summary>
            Ideal <see cref="T:CSDeskBand.Size"/> of the deskband in the vertical orientation. There is no guarantee that the deskband will be this size.
            </summary>
            <seealso cref="T:CSDeskBand.TaskbarOrientation"/>
            <value>
            The default value is <see cref="F:CSDeskBand.CSDeskBandOptions.TaskbarVerticalWidth"/> for the width and 200 for the height.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.MinHorizontalSize">
            <summary>
            Minimum <see cref="T:CSDeskBand.Size"/> of the deskband in the horizontal orientation.
            </summary>
            <seealso cref="T:CSDeskBand.TaskbarOrientation"/>
            <value>
            The default value is <see cref="F:CSDeskBand.CSDeskBandOptions.NoLimit"/>.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.MaxHorizontalHeight">
            <summary>
            Maximum height of the deskband in the horizontal orientation.
            </summary>
            <remarks>
            The maximum width will have to be addressed in your code as there is no limit to the width of the deskband when horizontal.
            </remarks>
            <seealso cref="T:CSDeskBand.TaskbarOrientation"/>
            <value>
            The default value is <see cref="F:CSDeskBand.CSDeskBandOptions.NoLimit"/>.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.HorizontalSize">
            <summary>
            Ideal <see cref="T:CSDeskBand.Size"/> of the deskband in the horizontal orientation. There is no guarantee that the deskband will be this size.
            </summary>
            <seealso cref="T:CSDeskBand.TaskbarOrientation"/>
            <value>
            The default value is 200 for the width and <see cref="F:CSDeskBand.CSDeskBandOptions.TaskbarHorizontalHeightLarge"/> for the height.
            </value>
        </member>
        <member name="P:CSDeskBand.CSDeskBandOptions.ContextMenuItems">
            <summary>
            The list of <see cref="T:CSDeskBand.ContextMenu.DeskBandMenuItem"/> the comprise the deskbands context menu.
            </summary>
            <value>
            A list of <see cref="T:CSDeskBand.ContextMenu.DeskBandMenuItem"/> for the context menu. An empty list indicates no context menu.
            </value>
            <remarks>
            These context menu items are in addition of the default ones that windows provides.
            </remarks>
        </member>
        <member name="M:CSDeskBand.CSDeskBandOptions.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CSDeskBand.CSDeskBandOptions"/>.
            </summary>
        </member>
        <member name="E:CSDeskBand.CSDeskBandOptions.PropertyChanged">
            <summary>
            Occurs when a property has change.
            </summary>
        </member>
        <member name="T:CSDeskBand.Interop.DESKBANDINFO">
            <summary>
            Receives information about a band object. This structure is used with the deprecated IDeskBand::GetBandInfo method.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.dwMask">
            <summary>
            Set of flags that determine which members of this structure are being requested. 
            </summary>
            <remarks>
            This will be a combination of the following values:
                DBIM_MINSIZE    ptMinSize is being requested.
                DBIM_MAXSIZE    ptMaxSize is being requested.
                DBIM_INTEGRAL   ptIntegral is being requested.
                DBIM_ACTUAL     ptActual is being requested.
                DBIM_TITLE      wszTitle is being requested.
                DBIM_MODEFLAGS  dwModeFlags is being requested.
                DBIM_BKCOLOR    crBkgnd is being requested.
            </remarks>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.ptMinSize">
            <summary>
            Point structure that receives the minimum size of the band object. 
            The minimum width is placed in the x member and the minimum height 
            is placed in the y member. 
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.ptMaxSize">
            <summary>
            Point structure that receives the maximum size of the band object. 
            The maximum height is placed in the y member and the x member is ignored. 
            If there is no limit for the maximum height, (LONG)-1 should be used. 
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.ptIntegral">
            <summary>
            Point structure that receives the sizing step value of the band object. 
            The vertical step value is placed in the y member, and the x member is ignored. 
            The step value determines in what increments the band will be resized. 
            </summary>
            <remarks>
            This member is ignored if dwModeFlags does not contain DBIMF_VARIABLEHEIGHT. 
            </remarks>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.ptActual">
            <summary>
            Point structure that receives the ideal size of the band object. 
            The ideal width is placed in the x member and the ideal height is placed in the y member. 
            The band container will attempt to use these values, but the band is not guaranteed to be this size.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.wszTitle">
            <summary>
            The title of the band.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.dwModeFlags">
            <summary>
            A value that receives a set of flags that define the mode of operation for the band object. 
            </summary>
            <remarks>
            This must be one or a combination of the following values.
                DBIMF_NORMAL
                The band is normal in all respects. The other mode flags modify this flag.
                DBIMF_VARIABLEHEIGHT
                The height of the band object can be changed. The ptIntegral member defines the 
                step value by which the band object can be resized. 
                DBIMF_DEBOSSED
                The band object is displayed with a sunken appearance.
                DBIMF_BKCOLOR
                The band will be displayed with the background color specified in crBkgnd.
            </remarks>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.crBkgnd">
            <summary>
            The background color of the band.
            </summary>
            <remarks>
            This member is ignored if dwModeFlags does not contain the DBIMF_BKCOLOR flag. 
            </remarks>
        </member>
        <member name="T:CSDeskBand.Interop.DESKBANDINFO.DBIF">
            <summary>
            The view mode of the band object. This is one of the following values.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIF.DBIF_VIEWMODE_NORMAL">
            <summary>
            Band object is displayed in a horizontal band.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIF.DBIF_VIEWMODE_VERTICAL">
            <summary>
            Band object is displayed in a vertical band.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIF.DBIF_VIEWMODE_FLOATING">
            <summary>
            Band object is displayed in a floating band.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIF.DBIF_VIEWMODE_TRANSPARENT">
            <summary>
            Band object is displayed in a transparent band.
            </summary>
        </member>
        <member name="T:CSDeskBand.Interop.DESKBANDINFO.DBIM">
            <summary>
            The set of flags that determine which members of this structure are being requested by the caller. One or more of the following values:
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIM.DBIM_MINSIZE">
            <summary>
            ptMinSize is requested.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIM.DBIM_MAXSIZE">
            <summary>
            ptMaxSize is requested.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIM.DBIM_INTEGRAL">
            <summary>
            ptIntegral is requested.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIM.DBIM_ACTUAL">
            <summary>
            ptActual is requested.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIM.DBIM_TITLE">
            <summary>
            wszTitle is requested.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIM.DBIM_MODEFLAGS">
            <summary>
            dwModeFlags is requested.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIM.DBIM_BKCOLOR">
            <summary>
            crBkgnd is requested.
            </summary>
        </member>
        <member name="T:CSDeskBand.Interop.DESKBANDINFO.DBIMF">
            <summary>
            A value that receives a set of flags that specify the mode of operation for the band object. One or more of the following values:
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_NORMAL">
            <summary>
            The band uses default properties. The other mode flags modify this flag.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_FIXED">
            <summary>
            Windows XP and later: The band object is of a fixed sized and position. With this flag, a sizing grip is not displayed on the band object.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_FIXEDBMP">
            <summary>
            DBIMF_FIXEDBMP
            Windows XP and later: The band object uses a fixed bitmap (.bmp) file as its background. Note that backgrounds are not supported in all cases, so the bitmap may not be seen even when this flag is set.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_VARIABLEHEIGHT">
            <summary>
            The height of the band object can be changed. The ptIntegral member defines the step value by which the band object can be resized.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_UNDELETEABLE">
            <summary>
            Windows XP and later: The band object cannot be removed from the band container.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_DEBOSSED">
            <summary>
            The band object is displayed with a sunken appearance.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_BKCOLOR">
            <summary>
            The band is displayed with the background color specified in crBkgnd.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_USECHEVRON">
            <summary>
            Windows XP and later: If the full band object cannot be displayed (that is, the band object is smaller than ptActual, a chevron is shown to indicate that there are more options available. These options are displayed when the chevron is clicked.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_BREAK">
            <summary>
            Windows XP and later: The band object is displayed in a new row in the band container.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_ADDTOFRONT">
            <summary>
            Windows XP and later: The band object is the first object in the band container.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_TOPALIGN">
            <summary>
            Windows XP and later: The band object is displayed in the top row of the band container.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_NOGRIPPER">
            <summary>
            Windows Vista and later: No sizing grip is ever displayed to allow the user to move or resize the band object.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_ALWAYSGRIPPER">
            <summary>
            Windows Vista and later: A sizing grip that allows the user to move or resize the band object is always shown, even if that band object is the only one in the container.
            </summary>
        </member>
        <member name="F:CSDeskBand.Interop.DESKBANDINFO.DBIMF.DBIMF_NOMARGINS">
            <summary>
            Windows Vista and later: The band object should not display margins.
            </summary>
        </member>
        <member name="T:CSDeskBand.ICSDeskBand">
            <summary>
            Deskband Interface
            </summary>
        </member>
        <member name="T:CSDeskBand.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:CSDeskBand.Logging.ILog.Log(CSDeskBand.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:CSDeskBand.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:CSDeskBand.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:CSDeskBand.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:CSDeskBand.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:CSDeskBand.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:CSDeskBand.Logging.ILogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:CSDeskBand.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:CSDeskBand.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:CSDeskBand.Logging.LogProvider.SetCurrentLogProvider(CSDeskBand.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:CSDeskBand.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CSDeskBand.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:CSDeskBand.Logging.LogProvider.SetCurrentLogProvider(CSDeskBand.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:CSDeskBand.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:CSDeskBand.Logging.ILog"/></returns>
        </member>
        <member name="M:CSDeskBand.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:CSDeskBand.Logging.ILog"/></returns>
        </member>
        <member name="M:CSDeskBand.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:CSDeskBand.Logging.ILog"/></returns>
        </member>
        <member name="M:CSDeskBand.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:CSDeskBand.Logging.ILog"/></returns>
        </member>
        <member name="M:CSDeskBand.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:CSDeskBand.Logging.LogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:CSDeskBand.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:CSDeskBand.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CSDeskBand.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:CSDeskBand.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:CSDeskBand.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:CSDeskBand.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             internal class Foo : INotifyPropertyChanged {
               internal event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               internal string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:CSDeskBand.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            internal void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            internal void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            internal bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            internal object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            internal bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:CSDeskBand.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:CSDeskBand.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:CSDeskBand.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:CSDeskBand.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:CSDeskBand.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:CSDeskBand.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:CSDeskBand.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:CSDeskBand.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark internally available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:CSDeskBand.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            internal static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:CSDeskBand.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:CSDeskBand.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:CSDeskBand.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:CSDeskBand.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:CSDeskBand.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            internal static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            internal static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:CSDeskBand.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:CSDeskBand.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:CSDeskBand.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:CSDeskBand.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:CSDeskBand.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:CSDeskBand.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            internal ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:CSDeskBand.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:CSDeskBand.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:CSDeskBand.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:CSDeskBand.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:CSDeskBand.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:CSDeskBand.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:CSDeskBand.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:CSDeskBand.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:CSDeskBand.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:CSDeskBand.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:CSDeskBand.Size">
            <summary>
            Size class that is used so winforms or wpf is not used.
            </summary>
        </member>
        <member name="P:CSDeskBand.Size.Width">
            <summary>
            The width component of the size.
            </summary>
        </member>
        <member name="P:CSDeskBand.Size.Height">
            <summary>
            The height component of the size.
            </summary>
        </member>
        <member name="M:CSDeskBand.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:CSDeskBand.Size"/>.
            </summary>
            <param name="width">The <see cref="P:CSDeskBand.Size.Width"/> component.</param>
            <param name="height">The <see cref="P:CSDeskBand.Size.Height"/> component.</param>
        </member>
        <member name="M:CSDeskBand.Size.op_Implicit(System.Windows.Size)~CSDeskBand.Size">
            <summary>
            Converts from <see cref="T:System.Windows.Size"/> to <see cref="T:CSDeskBand.Size"/>.
            </summary>
            <param name="size">The <see cref="T:System.Windows.Size"/> to convert.</param>
        </member>
        <member name="M:CSDeskBand.Size.op_Implicit(CSDeskBand.Size)~System.Windows.Size">
            <summary>
            Converts from <see cref="T:CSDeskBand.Size"/> to <see cref="T:System.Windows.Size"/>.
            </summary>
            <param name="size">The <see cref="T:CSDeskBand.Size"/> to convert.</param>
        </member>
        <member name="M:CSDeskBand.Size.op_Implicit(System.Drawing.Size)~CSDeskBand.Size">
            <summary>
            Converts from <see cref="T:System.Drawing.Size"/> to <see cref="T:CSDeskBand.Size"/>.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.Size"/> to convert.</param>
        </member>
        <member name="M:CSDeskBand.Size.op_Implicit(CSDeskBand.Size)~System.Drawing.Size">
            <summary>
            Converts from <see cref="T:CSDeskBand.Size"/> to <see cref="T:System.Drawing.Size"/>.
            </summary>
            <param name="size">The <see cref="T:CSDeskBand.Size"/> to convert.</param>
        </member>
        <member name="E:CSDeskBand.Size.PropertyChanged">
            <summary>
            Occurs when one of the properties has changed its value.
            </summary>
        </member>
        <member name="T:CSDeskBand.TaskbarOrientation">
            <summary>
            The orientation of the taskbar.
            </summary>
        </member>
        <member name="F:CSDeskBand.TaskbarOrientation.Vertical">
            <summary>
            Vertical if the taskbar is either on top or bottom.
            </summary>
        </member>
        <member name="F:CSDeskBand.TaskbarOrientation.Horizontal">
            <summary>
            Horizontal if the taskbar is either on the left or right.
            </summary>
        </member>
        <member name="T:CSDeskBand.Edge">
            <summary>
            The edge where the taskbar is located.
            </summary>
        </member>
        <member name="F:CSDeskBand.Edge.Left">
            <summary>
            Taskbar is on the left edge.
            </summary>
        </member>
        <member name="F:CSDeskBand.Edge.Top">
            <summary>
            Taskbar is on the top edge.
            </summary>
        </member>
        <member name="F:CSDeskBand.Edge.Right">
            <summary>
            Taskbar is on the right edge.
            </summary>
        </member>
        <member name="F:CSDeskBand.Edge.Bottom">
            <summary>
            Taskbar is on the bottom edge.
            </summary>
        </member>
        <member name="T:CSDeskBand.TaskbarInfo">
            <summary>
            Provides information about the main taskbar.
            </summary>
        </member>
        <member name="P:CSDeskBand.TaskbarInfo.Orientation">
            <summary>
            Get the current <see cref="T:CSDeskBand.TaskbarOrientation"/> of the main taskbar.
            </summary>
            <value>
            The current orientation.
            </value>
        </member>
        <member name="P:CSDeskBand.TaskbarInfo.Edge">
            <summary>
            Get the current <see cref="T:CSDeskBand.Edge"/> of the main taskbar.
            </summary>
            <value>
            The current edge.
            </value>
        </member>
        <member name="P:CSDeskBand.TaskbarInfo.Size">
            <summary>
            Get the current <see cref="T:CSDeskBand.Size"/> of the main taskbar.
            </summary>
            <value>
            The current size.
            </value>
        </member>
        <member name="E:CSDeskBand.TaskbarInfo.TaskbarOrientationChanged">
            <summary>
            Occurs when the orientation of the main taskbar is changed.
            </summary>
        </member>
        <member name="E:CSDeskBand.TaskbarInfo.TaskbarEdgeChanged">
            <summary>
            Occurs when the edge of the main taskbar is changed.
            </summary>
        </member>
        <member name="E:CSDeskBand.TaskbarInfo.TaskbarSizeChanged">
            <summary>
            Occurs when the size of the taskbar is changed.
            </summary>
        </member>
    </members>
</doc>
